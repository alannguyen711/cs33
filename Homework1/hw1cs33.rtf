{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11220\viewh8760\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Alan Nguyen\
005565753\
\
2.71\
\
A. \
The example code is incorrect because it will not correctly account for extracting a negation number. It will not correctly extract a signed byte that has a 1 as its most significant bit. \
\
B. \
int xbyte(packed_t word, int bytenum)\
\{\
	/*\
	shift byte of interest into position of most significant byte\
	*/\
	int thisByte = word << ((3 - bytenum) << 3);\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	/*\
	move to rightmost position of 32-bit signed integer, the sign bit will be preserved\
	*/	return thisByte >> 24;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \}\
\
\
2.82\
\
A. \
FALSE\
The expression does not always yield one. A counterexample would be that 1 is greater than INT_MIN but multiplying by the negative of INT_MIN will not be greater than -1, or (1 > INT_MIN) != (-1 < -INT_MIN)\
\
B. TRUE\
((x+y)<<4) + y-x == 17*y+15*x is equal to\
(x+y) * 2^4 + y-x == 17*y+15*x which turns to\
16x+16y + y-x == 17*y+15*x, then finally combine to get\'92\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 17*y+15*x == 17*y+15*x\
\
C. TRUE\
~x = (-x - 1), so we know that the left side can be rewritten as (-x - 1) + (-y - 1) + 1 and the right side can be simplified to -(x+y) - 1\
Simplify left to -x + -y - 1 - 1 + 1and then to -x + -y -1\
Factor out a negative one from -x + -y to make it -(x+y) and both sides are equal\
-(x+y) - 1 == -(x+y) - 1\
\
D. TRUE\
The operations on the right side can be transformed as so\
-(unsigned)(y-x) will become -(uy-ux)\
The negative will cast it back to be a signed int, resulting in x - y, which is the same as (ux - uy), meaning that the expression is true and that it will always yield to 1.\
\
E. TRUE\
The sign of the original integer is preserved during the two rightshifts and will now appear in the two most significant bits. Shifting left by 2 will return the same value of the two least significant bits in the original value were zeros or will return a lesser value if the two least significant bits in the original value were ones (they will be replaced by zeros during the right shift, which will be smaller than the original value). By this logic, the operations on the left will always return a value <= x which means that the entire expression always returns 1.}